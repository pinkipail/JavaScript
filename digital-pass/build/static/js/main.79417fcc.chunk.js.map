{"version":3,"sources":["Header/Header.js","TemporaryPass/TemporaryPass.js","App.js","serviceWorker.js","index.js"],"names":["className","href","required","value","placeholder","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAIe,G,gBAAA,WACX,OACI,4BAAQA,UAAU,UACd,yBAAKA,UAAU,gBAAf,+FACA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,oBAAf,qGACA,yBAAKA,UAAU,oBAAf,2GACA,yBAAKA,UAAU,oBAAf,yHAEJ,yBAAKA,UAAU,gBAAf,+BCVG,G,YAAA,WACX,OACI,yBAAKA,UAAU,kBACX,8BACI,yBAAKA,UAAU,eAAf,sJAGA,yBAAKA,UAAU,kBAAf,slBACkH,uBAAGC,KAAK,KAAR,wCADlH,KAGA,4BAAQD,UAAU,SAASE,UAAQ,GAC/B,4BAAQC,MAAM,IAAd,0IACA,qFACA,4HACA,yEACA,wIAAqC,yHAAgC,qFAEzE,2BAAOH,UAAU,QAAQI,YAAY,8FAAmBF,UAAQ,IAChE,2BAAOF,UAAU,QAAQI,YAAY,uJAA8BF,UAAQ,IAC3E,4BAAQF,UAAU,SAASE,UAAQ,GAC/B,4BAAQC,MAAM,IAAd,8HACA,qEACA,qEACA,qEACA,wDACA,gEACA,+DAEJ,4BAAQH,UAAU,SAASE,UAAQ,GAC/B,4BAAQC,MAAM,IAAd,mFACA,wEACA,mKACA,sIAGJ,4BAAQH,UAAU,aAAaK,KAAK,UAApC,yG,YChBDC,MAZf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79417fcc.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\n\r\n\r\nexport default function() {\r\n    return (\r\n        <header className='header'>\r\n            <div className='header__logo'>ЦИФРОВОЙ ПРОПУСК</div>\r\n            <div className='header-nav'>\r\n                <div className='header-nav__item'>Временный пропуск</div>\r\n                <div className='header-nav__item'>Постоянный пропуск</div>\r\n                <div className='header-nav__item'>Заявка от организации</div>\r\n            </div>\r\n            <div className='header__quit'>ВХОД</div>\r\n        </header>\r\n    )\r\n  }\r\n  \r\n","import React from 'react'\r\nimport './TemporaryPass.css'\r\n\r\nexport default function() {\r\n    return (\r\n        <div className='temporary-pass'>\r\n            <form>\r\n                <div className='pass__title'>\r\n                    Запрос временного пропуска\r\n                </div>\r\n                <div className='pass__subtitle'>\r\n                    Временный поиск выдается для разового покидания места проживания по причинам, предусмотренным соответствующим <a href='/'>Указом</a>.\r\n                </div>\r\n                <select className='select' required>\r\n                    <option value=''>Причина запроса пропуска</option>\r\n                    <option>на работу</option>\r\n                    <option>в магазин / аптеку</option>\r\n                    <option>к врачу</option>\r\n                    <option>в банк / организацию</option><option>к родственникам</option><option>прогулка</option>\r\n                </select>\r\n                <input className='input' placeholder='Адрес назначения' required/>\r\n                <input className='input' placeholder='Дата и время начала пропуска'required/>\r\n                <select className='select' required>\r\n                    <option value=''>Срок действия пропуска</option>\r\n                    <option>15 минут</option>\r\n                    <option>30 минут</option>\r\n                    <option>45 минут</option>\r\n                    <option>1 час</option>\r\n                    <option>1,5 часа</option>\r\n                    <option>2 часа</option>\r\n                </select>\r\n                <select className='select' required>\r\n                    <option value=''>Тип транспорта</option>\r\n                    <option>Пешком</option>\r\n                    <option>Общественный транспорт</option>\r\n                    <option>Личный автомобиль</option>\r\n                </select>\r\n\r\n                <button className='btn-submit' type='submit'>Запросить пропуск</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { Fragment } from 'react';\nimport './App.css';\nimport Header from './Header/Header'\nimport Login from './Login/Login'\nimport TemporaryPass from './TemporaryPass/TemporaryPass'\nimport PermanentPass from './PermanentPass/PermanentPass'\nimport RequestFromOrganization from \"./RequestFromOrganization/RequestFromOrganization\";\n\n\n\nfunction App() {\n  return (\n    <Fragment>\n      <Header/>\n      {/*  <Login/> */}\n      <TemporaryPass/> \n      {/* <PermanentPass/> */}\n      {/* <RequestFromOrganization/> */}\n    </Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}